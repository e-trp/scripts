#!/usr/bin/python3
# -*- coding: utf-8 -*-
import numpy as np

# часть задач с курсов stepik Программирование на Python, Практикум - Математика и Python

'''
Напишите программу, находящую коэффициенты многочлена n-й степени, проходящего через n+1 точку:
c0+c1x1+c2x2+⋯+cnxn 
Программа должна принимать на вход в 1й строке натуральное число M (M=n+1) после этого в цикле M строк.
Каждая из M строк содержит 2 действительных числа: xi,yi - координаты M точек,
через которые проходит график многочлена.
На выходе программа должна выдавать через пробел n+1 (n+1=M) коэффициент многочлена:
c0,c1,c2…cn 
Пример пользовательского ввода
2 число M
0 2  M раз значение x, y  с новой строки
2 0 
'''
def coef():
    # входные параметры
    M=int(input())
    input_array=np.array([input().split() for i in range(M)], dtype=float)
    # значение y
    y=input_array[:,1]
    np.reshape(y,(M,1))
    # матрица значение x c единичным столбцом
    poly=np.hstack( (np.reshape([1 for _ in range(M)],(M,1)),
                    [[x**pow for x in [i] for pow in range(1,M)] for i in input_array[:,0]]))
    # вывод коэффициентов
    print(*(i for i in np.linalg.solve(poly,y)), sep=' ')

# добавление окончания к русским словам после числительных
def endings(n):
    if n%10==1 and n%100!=11:
        print(n, 'программист')
    elif (n%10 in [2,3,4]) and (n%100 not in[12,13,14]):
        print(n,'программиста')
    else:
        print(n, 'программистов')

'''
Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк, 
заканчивающихся строкой, содержащей только строку "end" (без кавычек)

Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i,
j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1).
У крайних символов соседний элемент находится с противоположной стороны матрицы.

В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
Sample Input 1:
9 5 3
0 7 -1
-5 2 9
end
Sample Output 1:
3 21 22
10 6 19
20 16 -1
'''
def mtx():
    n = ''
    matrix = []
    while True:
        n = str(input())
        if n == 'end':
            break
        matrix.append([int(s) for s in n.split()])
    li, lj = len(matrix), len(matrix[0])
    updmatrix = [[sum([matrix[i-1][j], matrix[(i+1)%li][j], matrix[i][j-1],
                  matrix[i][(j+1)%lj]]) for j in range(lj)] for i in range(li)]

    for i in range (li):
        for j in range (lj):
            print(updmatrix[i][j], end =' ')
        print()


'''
Выведите таблицу размером n×n, заполненную числами от 1 до n2 по спирали,
выходящей из левого верхнего угла и закрученной по часовой стрелке
'''
def spiral(n):
    dx, dy = 1, 0
    x, y = 0, 0
    arr = [[None] * n for _ in range(n)]
    for i in range(1, n**2+1):
        arr[x][y] = i
        nx, ny = x+dx, y+dy
        if 0 <= nx < n and 0 <= ny < n and not arr[nx][ny]:
            x, y = nx, ny
        else:
            dx, dy = -dy, dx
            x, y = x+dx, y+dy
    for x in list(zip(*arr)):
        print(*x)

'''
Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%

Это значит, что символ a исходного сообщения заменяется на символ * в шифре, 
b заменяется на d, c — на % и d — на #. Нужно зашифровать строку abacabadaba и расшифровать 
строку #*%*d*% с помощью этого шифра. Получаем следующие строки, 
которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac
'''
def cipher():
    x=[list(input()) for _ in range(4)]
    print(*[x[1][x[0].index(i)] for i in x[2]],sep='')
    print(*[x[0][x[1].index(i)] for i in x[3]],sep='')


'''
Напишите программу, которая принимает на стандартный вход список игр футбольных команд
 с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.
За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
Формат ввода следующий:
В первой строке указано целое число n — количество завершенных игр.
После этого идет n строк, в которых записаны результаты игры в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой

Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков
Sample Input:
3
Зенит;3;Спартак;1
Спартак;1;ЦСКА;1
ЦСКА;0;Зенит;2
Sample Output:

Зенит:2 2 0 0 6
ЦСКА:2 0 1 1 1
Спартак:2 0 1 1 1
'''
def championat():
    n=int(input())
    matches=[input().split(';') for _ in range(n)]
    teams={}
    [teams.update({ m[0]:[],m[2]:[]}) for m in matches]
    for m in matches:
        if int(m[1])>int(m[3]):
            teams[m[0]].append(3)
            teams[m[2]].append(0)
        elif int(m[3]) > int(m[1]):
            teams[m[2]].append(3)
            teams[m[0]].append(0)
        else:
            teams[m[0]].append(1)
            teams[m[2]].append(1)
    for com, resli in teams.items():
        print(com+':'+str(len(resli)),resli.count(3),resli.count(1),resli.count(0),sum(resli))

